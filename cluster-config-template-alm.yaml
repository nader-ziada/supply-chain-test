#@ load("@ytt:data", "data")

#@ if/end "config-template" not in data.values.excluded_templates:
---
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: config-template-alm
spec:
  configPath: .data

  healthRule:
    alwaysHealthy: {}

  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def delivery():
    apiVersion: data.packaging.carvel.dev/v1alpha1
    kind: Package
    metadata:
      name: #@ data.values.workload.metadata.name + "-1.0.0"
    spec:
      refName: #@ data.values.workload.metadata.name
      version: 1.0.0
      releaseNotes: |
        Initial release of the simple app package
      template:
        spec:
          fetch:
          - imgpkgBundle:
              image: #@ data.values.image
          template:
            - ytt:
                paths:
                - "config/"
            - kbld:
                paths:
                - ".imgpkg/images.yml"
                - "-"
          deploy:
            - kapp: {}
    #@ end

    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
    data:
      delivery.yml: #@ yaml.encode(delivery())