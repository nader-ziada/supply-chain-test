#@ load("@ytt:data", "data")

#@ if/end "kaniko-build" not in data.values.excluded_templates:
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: carvelpkg-build
spec:
  description: |-
    A task that builds an a carvel package
  params:
    - name: workload_name
      description: The name of the package
      type: string
    - name: image
      description: The path to the image
      type: string
    - name: ca_cert_data
      type: string
      default: ""
      description: >
        PEM encoded certificate data for the image registry where the image
        will be pushed to.
  results:
    - description: Digest of the image just built.
      name: image_digest
    - description: Ref of the image just built.
      name: image_ref
  steps:
    - name: build-package
      image: gcr.io/nziada-tkg-dev/supplychain/scriptingbase:latest
      securityContext:
        runAsUser: 0
      script: |
        #!/usr/bin/env bash

        set -o errexit
        set -o xtrace

        echo "starting..."
        MY_BUNDLE_DIR=/tmp/my-bundle
        mkdir -p "${MY_BUNDLE_DIR}/.imgpkg"
        mkdir -p "${MY_BUNDLE_DIR}/config"

        # build config.yaml, contains the Knative Service with an image reference to $(image)
        cat << EOF > "${MY_BUNDLE_DIR}/config/service.yaml"
        ---
        apiVersion: serving.knative.dev/v1
        kind: Service
        metadata:
          name: $(params.workload_name)
        spec:
          template:
            spec:
              serviceAccountName: cartographer-example-registry-creds-sa
              containers:
                - name: workload
                  image: $(params.image)
                  securityContext:
                    runAsUser: 1000
        EOF
        # kbld .imgpkg/images.yml from config.yaml
        kbld -f "${MY_BUNDLE_DIR}/config" --imgpkg-lock-output "${MY_BUNDLE_DIR}/.imgpkg/images.yml"

        BUNDLE="gcr.io/nziada-tkg-dev/tap-images/workloads/bundle"

        # imgpkg bundle the whole thing
        imgpkg push -b "${BUNDLE}" -f "${MY_BUNDLE_DIR}"

        echo -n "${BUNDLE}" | tee "$(results.image_ref.path)"

